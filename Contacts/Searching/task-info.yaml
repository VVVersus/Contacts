type: edu
custom_name: stage4
files:
- name: test/ContactsTest.java
  visible: false
  text: "import contacts.Main;\nimport org.hyperskill.hstest.stage.StageTest;\nimport\
    \ org.hyperskill.hstest.testcase.CheckResult;\nimport org.hyperskill.hstest.testcase.TestCase;\n\
    \nimport java.util.List;\nimport java.util.function.Function;\n\n\nclass TestClue\
    \ {\n\n    Function<String, CheckResult> callback;\n\n    TestClue(Function<String,\
    \ CheckResult> callback) {\n        this.callback = callback;\n    }\n}\n\n\n\
    public class ContactsTest extends StageTest<TestClue> {\n\n    public ContactsTest()\
    \ {\n        super(Main.class);\n    }\n    private CheckResult splitActionsFeedback(int\
    \ actualSize, int needSize) {\n        if (actualSize < needSize) {\n        \
    \    return CheckResult.wrong(String.format(\"This test should contain at least\
    \ %d actions, but you have only %d. \" +\n                            \"You should\
    \ separate your actions with an empty line.\",\n                    needSize,\n\
    \                    actualSize));\n        } else {\n            return null;\n\
    \        }\n    }\n    \n    @Override\n    public List<TestCase<TestClue>> generate()\
    \ {\n        return List.of (\n            new TestCase<TestClue>()\n        \
    \        .setInput(\"exit\")\n                .setAttach(new TestClue(output ->\
    \ {\n                    output = output.strip().toLowerCase();\n            \
    \        if (!output.contains(\"enter action\")) {\n                        return\
    \ new CheckResult(false,\n                            \"I didn't see where \\\"\
    Enter action\\\" part in the responsesFromClient\");\n                    }\n\
    \                    return CheckResult.correct();\n                })),\n\n \
    \           new TestCase<TestClue>()\n                .setInput(\n           \
    \         \"count\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    output = output.strip().toLowerCase();\n\
    \                    if (!output.contains(\"0 records\")) {\n                \
    \        return new CheckResult(false,\n                            \"No \\\"\
    0 records\\\" part \" +\n                                \"in the responsesFromClient\
    \ in a place where it should be\");\n                    }\n                 \
    \   return CheckResult.correct();\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"person\\n\" +\n                        \"John\\n\" +\n          \
    \              \"Smith\\n\" +\n                        \"\\n\" +\n           \
    \             \"\\n\" +\n                        \"123 456 789\\n\" +\n      \
    \              \"count\\n\" +\n                    \"exit\")\n               \
    \ .setAttach(new TestClue(output -> {\n                    output = output.strip().toLowerCase();\n\
    \                    if (output.contains(\"0 records\")) {\n                 \
    \       return new CheckResult(false,\n                            \"Can't add\
    \ the person\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"list\\n\"\
    \ +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n     \
    \               \"exit\")\n                .setAttach(new TestClue(output -> {\n\
    \                    String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\\
    s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 3);\n                    if (feedback != null) return feedback;\n          \
    \          \n                    String infoBlock = blocks[2];\n             \
    \       if (!infoBlock.contains(\"Name: John\")\n                        || !infoBlock.contains(\"\
    Surname: Smith\")\n                        || !infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                        || !infoBlock.contains(\"Gender: [no data]\"\
    )\n                        || !infoBlock.contains(\"Number: 123 456 789\")\n \
    \                       || !infoBlock.contains(\"Time created:\")\n          \
    \              || !infoBlock.contains(\"Time last edit:\")) {\n              \
    \          return new CheckResult(false,\n                            \"Something\
    \ wrong with printing user info\");\n                    }\n                 \
    \   return CheckResult.correct();\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"list\\n\" +\n                   \
    \ \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 3);\n              \
    \      if (feedback != null) return feedback;\n    \n                    String\
    \ infoBlock = blocks[2];\n                    if (!infoBlock.contains(\"Organization\
    \ name: Pizza Shop\")\n                        || !infoBlock.contains(\"Address:\
    \ Wall St. 1\")\n                        || !infoBlock.contains(\"Number: +0 (123)\
    \ 456-789-9999\")\n                        || !infoBlock.contains(\"Time created:\"\
    )\n                        || !infoBlock.contains(\"Time last edit:\")) {\n  \
    \                      return new CheckResult(false,\n                       \
    \     \"Something wrong with printing organization info\");\n                \
    \    }\n                    return CheckResult.correct();\n                })),\n\
    \n            new TestCase<TestClue>()\n                .setInput(\n         \
    \           \"add\\n\" +\n                        \"person\\n\" +\n          \
    \              \"John\\n\" +\n                        \"Smith\\n\" +\n       \
    \                 \"\\n\" +\n                        \"\\n\" +\n             \
    \           \"123 456 789\\n\" +\n                    \"list\\n\" +\n        \
    \            \"1\\n\" +\n                    \"edit\\n\" +\n                 \
    \       \"gender\\n\" +\n                        \"M\\n\" +\n                \
    \    \"menu\\n\" +\n                    \"list\\n\" +\n                    \"\
    1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\")\n \
    \               .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 6);\n              \
    \      if (feedback != null) return feedback;\n    \n                    String\
    \ infoBlock = blocks[5];\n                    if (!infoBlock.contains(\"Name:\
    \ John\")\n                        || !infoBlock.contains(\"Surname: Smith\")\n\
    \                        || !infoBlock.contains(\"Birth date: [no data]\")\n \
    \                       || !infoBlock.contains(\"Gender: M\")\n              \
    \          || !infoBlock.contains(\"Number: 123 456 789\")\n                 \
    \       || !infoBlock.contains(\"Time created:\")\n                        ||\
    \ !infoBlock.contains(\"Time last edit:\")) {\n                        return\
    \ new CheckResult(false,\n                            \"Editing person is not\
    \ working\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"organization\\\
    n\" +\n                        \"Pizza Shop\\n\" +\n                        \"\
    Wall St. 1\\n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n  \
    \                  \"list\\n\" +\n                    \"1\\n\" +\n           \
    \         \"edit\\n\" +\n                        \"address\\n\" +\n          \
    \              \"Wall St 2\\n\" +\n                    \"menu\\n\" +\n       \
    \             \"list\\n\" +\n                    \"1\\n\" +\n                \
    \    \"menu\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    String[] blocks = output.strip().split(\"\
    (\\\\s*\\\\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n          \
    \          \n                    String infoBlock = blocks[5];\n             \
    \       if (!infoBlock.contains(\"Organization name: Pizza Shop\")\n         \
    \               || !infoBlock.contains(\"Address: Wall St 2\")\n             \
    \           || !infoBlock.contains(\"Number: +0 (123) 456-789-9999\")\n      \
    \                  || !infoBlock.contains(\"Time created:\")\n               \
    \         || !infoBlock.contains(\"Time last edit:\")) {\n                   \
    \     return new CheckResult(false,\n                            \"Editing organization\
    \ is not working\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"organization\\\
    n\" +\n                        \"Pizza Shop\\n\" +\n                        \"\
    Wall St. 1\\n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n  \
    \                  \"add\\n\" +\n                        \"person\\n\" +\n   \
    \                     \"John\\n\" +\n                        \"Smith\\n\" +\n\
    \                        \"\\n\" +\n                        \"\\n\" +\n      \
    \                  \"123 456 789\\n\" +\n                    \"add\\n\" +\n  \
    \                      \"organization\\n\" +\n                        \"PizzaNuts\\\
    n\" +\n                        \"Wall St. 6\\n\" +\n                        \"\
    +0 (123) 456-789-9999\\n\" +\n                    \"search\\n\" +\n          \
    \              \"pizz\\n\" +\n                    \"1\\n\" +\n               \
    \     \"menu\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    String[] blocks = output.strip().split(\"\
    (\\\\s*\\\\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 4);\n                    if (feedback != null) return feedback;\n    \n    \
    \                \n                    String infoBlock = blocks[3];\n       \
    \             if (!infoBlock.contains(\"Pizza Shop\")\n                      \
    \  || !infoBlock.contains(\"PizzaNuts\")\n                        || infoBlock.contains(\"\
    John\")) {\n                        return new CheckResult(false,\n          \
    \                  \"Search is not working\");\n                    }\n      \
    \              return CheckResult.correct();\n                })),\n\n       \
    \     new TestCase<TestClue>()\n                .setInput(\n                 \
    \   \"add\\n\" +\n                        \"organization\\n\" +\n            \
    \            \"Pizza Shop\\n\" +\n                        \"Wall St. 1\\n\" +\n\
    \                        \"+0 (123) 456-789-9999\\n\" +\n                    \"\
    add\\n\" +\n                        \"person\\n\" +\n                        \"\
    John\\n\" +\n                        \"Smith\\n\" +\n                        \"\
    \\n\" +\n                        \"\\n\" +\n                        \"123 456\
    \ 789\\n\" +\n                    \"add\\n\" +\n                        \"organization\\\
    n\" +\n                        \"PizzaNuts\\n\" +\n                        \"\
    Wall St. 6\\n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n  \
    \                  \"search\\n\" +\n                        \"s\\n\" +\n     \
    \               \"1\\n\" +\n                    \"menu\\n\" +\n              \
    \      \"exit\")\n                .setAttach(new TestClue(output -> {\n      \
    \              String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\"\
    );\n                    var feedback = splitActionsFeedback(blocks.length, 4);\n\
    \                    if (feedback != null) return feedback;\n                \
    \    \n                    String infoBlock = blocks[3];\n                   \
    \ if (!infoBlock.contains(\"Pizza Shop\")\n                        || !infoBlock.contains(\"\
    John Smith\")\n                        || !infoBlock.contains(\"PizzaNuts\"))\
    \ {\n                        return new CheckResult(false,\n                 \
    \           \"Search is not working\");\n                    }\n             \
    \       return CheckResult.correct();\n                })),\n\n        new TestCase<TestClue>()\n\
    \            .setInput(\n                \"add\\n\" +\n                    \"\
    organization\\n\" +\n                    \"Pizza Shop\\n\" +\n               \
    \     \"Wall St. 1\\n\" +\n                    \"+0 (123) 456-789-9999\\n\" +\n\
    \                \"add\\n\" +\n                    \"person\\n\" +\n         \
    \           \"John\\n\" +\n                    \"Smith\\n\" +\n              \
    \      \"\\n\" +\n                    \"\\n\" +\n                    \"123 456\
    \ 789\\n\" +\n                \"add\\n\" +\n                    \"organization\\\
    n\" +\n                    \"PizzaNuts\\n\" +\n                    \"Wall St.\
    \ 6\\n\" +\n                    \"+0 (123) 456-781-9999\\n\" +\n             \
    \   \"search\\n\" +\n                    \"789\\n\" +\n                \"1\\n\"\
    \ +\n                \"menu\\n\" +\n                \"exit\")\n            .setAttach(new\
    \ TestClue(output -> {\n                String[] blocks = output.strip().split(\"\
    (\\\\s*\\\\n\\\\s*){2,}\");\n                var feedback = splitActionsFeedback(blocks.length,\
    \ 4);\n                if (feedback != null) return feedback;\n    \n        \
    \        String infoBlock = blocks[3];\n                if (!infoBlock.contains(\"\
    Pizza Shop\")\n                    || !infoBlock.contains(\"John Smith\")\n  \
    \                  || infoBlock.contains(\"PizzaNuts\")) {\n                 \
    \   return new CheckResult(false,\n                        \"Search by phone number\
    \ is not working\");\n                }\n                return CheckResult.correct();\n\
    \            }))\n        );\n    }\n\n    @Override\n    public CheckResult check(String\
    \ reply, TestClue clue) {\n        try {\n            return clue.callback.apply(reply);\n\
    \        }\n        catch (Exception ex) {\n            return new CheckResult(false,\
    \ \"Can't check the answer\");\n        }\n    }\n}\n"
  learner_created: false
- name: src/contacts/Main.java
  visible: true
  text: |
    package contacts;


    import java.util.LinkedList;
    import java.util.List;
    import java.util.Locale;
    import java.util.Scanner;

    public class Main {
        static Scanner scanner = new Scanner(System.in);
        static List<Contact> contacts = new LinkedList<>();
        public static void main(String[] args) {
            printMenu();
            String option = null;

            while (!"exit".equals(option = scanner.nextLine().toLowerCase(Locale.US).trim())) {
                switch (option) {
                    case "add":
                        add();
                        break;
                    case "remove":
                        remove();
                        break;
                    case "edit":
                        edit();
                        break;
                    case "count":
                        count();
                        break;
                    case "list":
                        list();
                        break;
                    default:
                        System.out.println("Try again!");
                }
            }

        }

        private static void edit() {
            if (contacts.size() > 0) {
                list();
                System.out.println("Select a record:");
                int contactId = Integer.parseInt(scanner.nextLine()) - 1;
                System.out.println("Select a field (name, surname, number):");
                String field = scanner.nextLine().toLowerCase().trim();
                switch (field) {
                    case "name":
                        System.out.println("Enter name:");
                        contacts.get(contactId).setName(scanner.nextLine().trim());
                        break;
                    case "surname":
                        System.out.println("Enter surname:");
                        contacts.get(contactId).setSurname(scanner.nextLine().trim());
                        break;
                    case "number":
                        System.out.println("Enter number:");
                        contacts.get(contactId).setNumber(scanner.nextLine().trim());
                        break;
                    default:
                        System.out.println("Unknown field!");
                }
                System.out.println("The record updated!");
            } else {
                System.out.println("No records to edit!");
            }
        }

        private static void remove() {
            if (contacts.size() > 0) {
                list();
                System.out.println("Select a record:");
                contacts.remove(Integer.parseInt(scanner.nextLine()) - 1);
                System.out.println("The record removed!");
            } else {
                System.out.println("No records to remove!");
            }
        }

        private static void list() {
            if (contacts.size() > 0) {
                for (int i = 0; i < contacts.size(); i++) {
                    System.out.println(i + 1 + ". " + contacts.get(i).toString());
                }

            } else {
                System.out.println("No records!");
            }
        }

        private static void count() {
            System.out.println(String.format("The Phone Book has %d records.", contacts.size()));
        }

        private static void add() {
            System.out.println("Enter the name:");
            String name = scanner.nextLine();
            System.out.println("Enter the surname:");
            String surname = scanner.nextLine();
            System.out.println("Enter the number:");
            String number = scanner.nextLine();

            contacts.add(new Contact(name, surname, number));
            System.out.println("The record added.");
        }

        public static void printMenu() {
            System.out.println("Enter action (add, remove, edit, count, list, exit):");
        }

    }
  learner_created: true
- name: src/contacts/Contact.java
  visible: true
  learner_created: true
- name: src/contacts/OrganizationContact.java
  visible: true
  learner_created: true
- name: src/contacts/PersonalContact.java
  visible: true
  learner_created: true
- name: src/contacts/ContactBook.java
  visible: true
  learner_created: true
- name: phonebook.db
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/43/stages/231/implement
status: Solved
record: -1
